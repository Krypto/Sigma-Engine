#ifndef SIGMA_TYPES_REGISTER
#define SIGMA_TYPES_REGISTER

#include "LuaEngine.h"
#include "Vector.h"
#include "Node.h"
#include "Scene.h"
#include "Camera2D.h"
#include "BaseGame.h"
#include "Color.h"
#include "MessageNetwork.h"
#include "SoundSystem.h"
#include "Window.h"
#include "Component.h"
#include "Sprite.h"
#include "AnimatedSprite.h"
#include "Input.h"

namespace sig {
	using namespace math;
	namespace reg {

		static void RegisterTypes(Lua *lua, BaseGame *game) {
			lua_State *L = lua->GetState();

			// Register Vector2
			LuaBinding(L)
				.beginClass<Vector2>("Vector2")
					.addConstructor(LUA_ARGS())
					.addConstructor(LUA_ARGS(_opt<float>))
					.addConstructor(LUA_ARGS(_opt<float>, _opt<float>))
					.addProperty("x", &Vector2::X, &Vector2::SetX)
					.addProperty("y", &Vector2::Y, &Vector2::SetY)
					.addFunction("cross", &Vector2::Cross, LUA_ARGS(_opt<const Vector2&>))
					.addFunction("dot", &Vector2::Dot, LUA_ARGS(_opt<const Vector2&>))
					.addPropertyReadOnly("length", &Vector2::Length)
					.addFunction("max", static_cast<float(Vector2::*)()>(&Vector2::Max))
					.addFunction("normalized", &Vector2::Normalized)
					.addFunction("__len", &Vector2::Length)
					.addFunction("__add", &Vector2::operator+)
					.addFunction("__sub", &Vector2::operator-)
					.addFunction("__mul", &Vector2::operator*)
					.addFunction("__eq", &Vector2::operator==)
					.addFunction("__div", &Vector2::operator/)
				.endClass();

			// Register Node
			LuaBinding(L)
				.beginClass<Node>("Node")
					.addPropertyReadOnly("children", &Node::GetChildren)
					.addPropertyReadOnly("components", &Node::GetComponents)
					.addPropertyReadOnly("name", &Node::GetName)
					.addPropertyReadOnly("parent", &Node::GetParent)
					.addProperty("origin", &Node::GetOrigin, &Node::SetOrigin)
					.addProperty("position", &Node::GetPosition, &Node::SetPosition)
					.addProperty("scale", &Node::GetScale, &Node::SetScale)
					.addProperty("rotation", &Node::GetRotation, &Node::SetRotation)
					.addProperty("linear_velocity", &Node::GetLinearVelocity, &Node::SetLinearVelocity)
					.addProperty("angular_velocity", &Node::GetAngularVelocity, &Node::SetAngularVelocity)
					.addPropertyReadOnly("awake", &Node::IsAwake)
					.addPropertyReadOnly("mass", &Node::GetMass)
					.addPropertyReadOnly("scene", &Node::GetScene)
					.addPropertyReadOnly("dead", &Node::IsDead)
					.addFunction("get_child", &Node::GetChild)
					.addFunction("get_child_inactive", &Node::GetChildInactive)
					.addFunction("get_component", &Node::GetComponent)
					.addFunction("instantiate", &Node::Instantiate)
					.addFunction("remove_child", &Node::RemoveChild)
					.addFunction("remove_child_inactive", &Node::RemoveChildInactive)
					.addFunction("remove_parent", &Node::RemoveParent)
					.addFunction("set_parent", &Node::SetParent)
					.addFunction("apply_force", static_cast<void(Node::*)(const Vector2&, bool)>(&Node::ApplyForce))
					.addFunction("apply_force", static_cast<void(Node::*)(const Vector2&, const Vector2&, bool)>(&Node::ApplyForce))
					.addFunction("apply_impulse", &Node::ApplyImpulse)
					.addFunction("apply_torque", &Node::ApplyTorque)
					.endClass();

			// Register Scene
			LuaBinding(L)
				.beginClass<Scene>("Scene")
					.addPropertyReadOnly("nodes", static_cast<std::vector<Node*>(Scene::*)()>(&Scene::GetAllNodes))
					.addPropertyReadOnly("game", &Scene::GetGame)
					.addPropertyReadOnly("root", &Scene::GetRoot)
					.addProperty("active_camera", &Scene::GetCamera, &Scene::SetCamera)
					.addProperty("back_color", &Scene::GetBackground, &Scene::SetBackground)
					.addFunction("instantiate", &Scene::Instantiate)
					.addFunction("remove_child", &Scene::RemoveChild)
					.addFunction("add_child_inactive", &Scene::AddChildInactive)
					.addFunction("remove_child_inactive", &Scene::RemoveChildInactive)
					.addFunction("get_child", &Scene::GetChild)
					.addFunction("get_child_inactive", &Scene::GetChildInactive)
					.addFunction("send_message", &Scene::SendMessage)
				.endClass();

			// Register Game
			LuaBinding(L)
				.beginClass<BaseGame>("Game")
					.addPropertyReadOnly("sound_system", &BaseGame::GetSoundSystem)
					.addPropertyReadOnly("window", &BaseGame::GetWindow)
					.addProperty("current_scene", &BaseGame::GetCurrentScene, &BaseGame::SetCurrentScene)
					.addFunction("pause", &BaseGame::Pause)
					.addFunction("restart", &BaseGame::Restart)
					.addFunction("resume", &BaseGame::Resume)
				.endClass();

			// Register Camera2D
			LuaBinding(L)
				.beginExtendClass<Camera2D, Node>("Camera2D")
					.addConstructor(LUA_ARGS())
					.addProperty("zoom", &Camera2D::GetZoom, &Camera2D::SetZoom)
				.endClass();

			// Register Color
			LuaBinding(L)
				.beginClass<Color>("Color")
					.addConstructor(LUA_ARGS(_opt<unsigned int>, _opt<float>))
					.addConstructor(LUA_ARGS(_opt<float>, _opt<float>, _opt<float>, _opt<float>))
					.addFunction("blend", &Color::Blend)
					.addFunction("brightness", &Color::Brightness)
					.addVariable("r", &Color::r, true)
					.addVariable("g", &Color::g, true)
					.addVariable("b", &Color::b, true)
					.addVariable("a", &Color::a, true)
					.addConstant("BLACK",		Color::BLACK)
					.addConstant("WHITE",		Color::WHITE)
					.addConstant("DARK_GRAY",	Color::DARK_GRAY)
					.addConstant("GRAY",		Color::GRAY)
					.addConstant("RED",			Color::RED)
					.addConstant("GREEN",		Color::GREEN)
					.addConstant("BLUE",		Color::BLUE)
					.addConstant("DARK_RED",	Color::DARK_RED)
					.addConstant("DARK_GREEN",	Color::DARK_GREEN)
					.addConstant("DARK_BLUE",	Color::DARK_BLUE)
					.addConstant("YELLOW",		Color::YELLOW)
					.addConstant("DARK_YELLOW",	Color::DARK_YELLOW)
					.addConstant("PINK",		Color::PINK)
					.addConstant("MAGENTA",		Color::MAGENTA)
					.addConstant("CYAN",		Color::CYAN)
					.addConstant("TRANSPARENT",	Color::TRANSPARENT)
				.endClass();

			// Register Message & Collision
			LuaBinding(L)
				.beginClass<Message>("Message")
					.addPropertyReadOnly("from", &Message::GetFrom)
					.addPropertyReadOnly("to", &Message::GetTo)
					.addPropertyReadOnly("user_data", &Message::GetUserData)
					.addPropertyReadOnly("body", &Message::GetBody)
				.endClass();
			LuaBinding(L)
				.beginClass<Collision>("Collision")
					.addVariable("hit_node", &Collision::hitNode, false)
					.addVariable("hit_normal", &Collision::hitNormal, false)
					.addVariable("hit_position", &Collision::hitPosition, false)
				.endClass();

			// Register Sound System
			LuaBinding(L)
				.beginClass<SoundSystem>("SoundSystem")
					.addProperty("master_volume", &SoundSystem::GetMasterVolume, &SoundSystem::SetMasterVolume)
					.addFunction("play", static_cast<void(SoundSystem::*)(AudioClip*)>(&SoundSystem::Play))
					.addFunction("play", static_cast<void(SoundSystem::*)(const string&)>(&SoundSystem::Play))
				.endClass();

			// Register AudioClip
			LuaBinding(L)
				.beginClass<AudioClip>("AudioClip")
					.addProperty("pan", &AudioClip::GetPan, &AudioClip::SetPan)
					.addProperty("pitch", &AudioClip::GetPitch, &AudioClip::SetPitch)
					.addProperty("volume", &AudioClip::GetVolume, &AudioClip::SetVolume)
					.addProperty("position", &AudioClip::GetPosition, &AudioClip::SetPosition)
					.addProperty("spatial", &AudioClip::Is3D, &AudioClip::SetIs3D)
					.addProperty("loop", &AudioClip::IsLoop, &AudioClip::SetLoop)
					.addPropertyReadOnly("playing", &AudioClip::IsPlaying)
					.addPropertyReadOnly("paused", &AudioClip::IsPaused)
					.addPropertyReadOnly("name", &AudioClip::GetName)
					.addFunction("play", &AudioClip::Play)
					.addFunction("pause", &AudioClip::Pause)
					.addFunction("stop", &AudioClip::Stop)
				.endClass();

			// Register Window
			LuaBinding(L)
				.beginClass<Window>("Window")
					.addPropertyReadOnly("width", &Window::GetWidth)
					.addPropertyReadOnly("height", &Window::GetHeight)
					.addFunction("resize", &Window::Resize)
				.endClass();

			// Register Component Base
			LuaBinding(L)
				.beginClass<Component>("Component")
					.addPropertyReadOnly("name", &Component::GetName)
					.addPropertyReadOnly("owner", &Component::GetOwner)
					.addProperty("enabled", &Component::IsEnabled, &Component::SetEnabled)
				.endClass();

			// Register Script
			LuaBinding(L)
				.beginExtendClass<Script, Component>("Script")
				.endClass();

			// Register Sprite
			LuaBinding(L)
				.beginExtendClass<Sprite, Component>("Sprite")
					.addProperty("color", &Sprite::GetColor, &Sprite::SetColor)
					.addProperty("uv", &Sprite::GetUVRectangle, &Sprite::SetUVRectangle)
				.endClass();

			// Register AnimatedSprite
			LuaBinding(L)
				.beginExtendClass<AnimatedSprite, Sprite>("AnimatedSprite")
					.addPropertyReadOnly("animations", &AnimatedSprite::GetAnimations)
					.addPropertyReadOnly("colums", &AnimatedSprite::GetCols)
					.addPropertyReadOnly("rows", &AnimatedSprite::GetRows)
					.addPropertyReadOnly("current_animation", &AnimatedSprite::GetCurrent)
					.addProperty("current_frame", &AnimatedSprite::GetFrame, &AnimatedSprite::SetFrame)
					.addProperty("static", &AnimatedSprite::IsStatic, &AnimatedSprite::SetStatic)
					.addFunction("set_animation", &AnimatedSprite::SetAnimation)
					.addFunction("add_animation", &AnimatedSprite::AddAnimation)
				.endClass();

			// Register Animation
			LuaBinding(L)
				.beginClass<Animation>("Animation")
					.addVariable("loop", &Animation::loop)
					.addVariable("speed", &Animation::speed)
					.addVariable("name", &Animation::name, false)
					.addVariable("frames", &Animation::frames, false)
				.endClass();

			// Register Input
			LuaBinding(L)
				.beginClass<Input>("Input")
					.addStaticFunction("get_key", &Input::GetKey)
					.addStaticFunction("get_key_down", &Input::GetKeyDown)
					.addStaticFunction("get_key_up", &Input::GetKeyUp)
					.addStaticFunction("get_modifier", &Input::GetModifier)
					.addStaticFunction("get_mouse", &Input::GetMouse)
					.addStaticFunction("get_mouse_button_down", &Input::GetMouseButtonDown)
					.addStaticFunction("get_mouse_button_up", &Input::GetMouseButtonUp)
					.addStaticFunction("get_mouse_position", &Input::GetMousePosition)
					.addConstant("KEY_UNKNOWN", Input::KEY_UNKNOWN)
					.addConstant("KEY_A", Input::KEY_A)
					.addConstant("KEY_B", Input::KEY_B)
					.addConstant("KEY_C", Input::KEY_C)
					.addConstant("KEY_D", Input::KEY_D)
					.addConstant("KEY_E", Input::KEY_E)
					.addConstant("KEY_F", Input::KEY_F)
					.addConstant("KEY_G", Input::KEY_G)
					.addConstant("KEY_H", Input::KEY_H)
					.addConstant("KEY_I", Input::KEY_I)
					.addConstant("KEY_J", Input::KEY_J)
					.addConstant("KEY_K", Input::KEY_K)
					.addConstant("KEY_L", Input::KEY_L)
					.addConstant("KEY_M", Input::KEY_M)
					.addConstant("KEY_N", Input::KEY_N)
					.addConstant("KEY_O", Input::KEY_O)
					.addConstant("KEY_P", Input::KEY_P)
					.addConstant("KEY_Q", Input::KEY_Q)
					.addConstant("KEY_R", Input::KEY_R)
					.addConstant("KEY_S", Input::KEY_S)
					.addConstant("KEY_T", Input::KEY_T)
					.addConstant("KEY_U", Input::KEY_U)
					.addConstant("KEY_V", Input::KEY_V)
					.addConstant("KEY_W", Input::KEY_W)
					.addConstant("KEY_X", Input::KEY_X)
					.addConstant("KEY_Y", Input::KEY_Y)
					.addConstant("KEY_Z", Input::KEY_Z)
					.addConstant("KEY_1", Input::KEY_1)
					.addConstant("KEY_2", Input::KEY_2)
					.addConstant("KEY_3", Input::KEY_3)
					.addConstant("KEY_4", Input::KEY_4)
					.addConstant("KEY_5", Input::KEY_5)
					.addConstant("KEY_6", Input::KEY_6)
					.addConstant("KEY_7", Input::KEY_7)
					.addConstant("KEY_8", Input::KEY_8)
					.addConstant("KEY_9", Input::KEY_9)
					.addConstant("KEY_0", Input::KEY_0)
					.addConstant("KEY_RETURN", Input::KEY_RETURN)
					.addConstant("KEY_ESCAPE", Input::KEY_ESCAPE)
					.addConstant("KEY_BACKSPACE", Input::KEY_BACKSPACE)
					.addConstant("KEY_TAB", Input::KEY_TAB)
					.addConstant("KEY_SPACE", Input::KEY_SPACE)
					.addConstant("KEY_MINUS", Input::KEY_MINUS)
					.addConstant("KEY_EQUALS", Input::KEY_EQUALS)
					.addConstant("KEY_LEFTBRACKET", Input::KEY_LEFTBRACKET)
					.addConstant("KEY_RIGHTBRACKET", Input::KEY_RIGHTBRACKET)
					.addConstant("KEY_BACKSLASH", Input::KEY_BACKSLASH)
					.addConstant("KEY_NONUSHASH", Input::KEY_NONUSHASH)
					.addConstant("KEY_SEMICOLON", Input::KEY_SEMICOLON)
					.addConstant("KEY_APOSTROPHE", Input::KEY_APOSTROPHE)
					.addConstant("KEY_GRAVE", Input::KEY_GRAVE)
					.addConstant("KEY_COMMA", Input::KEY_COMMA)
					.addConstant("KEY_PERIOD", Input::KEY_PERIOD)
					.addConstant("KEY_SLASH", Input::KEY_SLASH)
					.addConstant("KEY_CAPSLOCK", Input::KEY_CAPSLOCK)
					.addConstant("KEY_F1", Input::KEY_F1)
					.addConstant("KEY_F2", Input::KEY_F2)
					.addConstant("KEY_F3", Input::KEY_F3)
					.addConstant("KEY_F4", Input::KEY_F4)
					.addConstant("KEY_F5", Input::KEY_F5)
					.addConstant("KEY_F6", Input::KEY_F6)
					.addConstant("KEY_F7", Input::KEY_F7)
					.addConstant("KEY_F8", Input::KEY_F8)
					.addConstant("KEY_F9", Input::KEY_F9)
					.addConstant("KEY_F10", Input::KEY_F10)
					.addConstant("KEY_F11", Input::KEY_F11)
					.addConstant("KEY_F12", Input::KEY_F12)
					.addConstant("KEY_PRINTSCREEN", Input::KEY_PRINTSCREEN)
					.addConstant("KEY_SCROLLLOCK", Input::KEY_SCROLLLOCK)
					.addConstant("KEY_PAUSE", Input::KEY_PAUSE)
					.addConstant("KEY_INSERT", Input::KEY_INSERT)
					.addConstant("KEY_HOME", Input::KEY_HOME)
					.addConstant("KEY_PAGEUP", Input::KEY_PAGEUP)
					.addConstant("KEY_DELETE", Input::KEY_DELETE)
					.addConstant("KEY_END", Input::KEY_END)
					.addConstant("KEY_PAGEDOWN", Input::KEY_PAGEDOWN)
					.addConstant("KEY_RIGHT", Input::KEY_RIGHT)
					.addConstant("KEY_LEFT", Input::KEY_LEFT)
					.addConstant("KEY_DOWN", Input::KEY_DOWN)
					.addConstant("KEY_UP", Input::KEY_UP)
					.addConstant("KEY_NUMLOCKCLEAR", Input::KEY_NUMLOCKCLEAR)
					.addConstant("KEY_KP_DIVIDE", Input::KEY_KP_DIVIDE)
					.addConstant("KEY_KP_MULTIPLY", Input::KEY_KP_MULTIPLY)
					.addConstant("KEY_KP_MINUS", Input::KEY_KP_MINUS)
					.addConstant("KEY_KP_PLUS", Input::KEY_KP_PLUS)
					.addConstant("KEY_KP_ENTER", Input::KEY_KP_ENTER)
					.addConstant("KEY_KP_1", Input::KEY_KP_1)
					.addConstant("KEY_KP_2", Input::KEY_KP_2)
					.addConstant("KEY_KP_3", Input::KEY_KP_3)
					.addConstant("KEY_KP_4", Input::KEY_KP_4)
					.addConstant("KEY_KP_5", Input::KEY_KP_5)
					.addConstant("KEY_KP_6", Input::KEY_KP_6)
					.addConstant("KEY_KP_7", Input::KEY_KP_7)
					.addConstant("KEY_KP_8", Input::KEY_KP_8)
					.addConstant("KEY_KP_9", Input::KEY_KP_9)
					.addConstant("KEY_KP_0", Input::KEY_KP_0)
					.addConstant("KEY_KP_PERIOD", Input::KEY_KP_PERIOD)
					.addConstant("KEY_NONUSBACKSLASH", Input::KEY_NONUSBACKSLASH)
					.addConstant("KEY_APPLICATION", Input::KEY_APPLICATION)
					.addConstant("KEY_POWER", Input::KEY_POWER)
					.addConstant("KEY_KP_EQUALS", Input::KEY_KP_EQUALS)
					.addConstant("KEY_F13", Input::KEY_F13)
					.addConstant("KEY_F14", Input::KEY_F14)
					.addConstant("KEY_F15", Input::KEY_F15)
					.addConstant("KEY_F16", Input::KEY_F16)
					.addConstant("KEY_F17", Input::KEY_F17)
					.addConstant("KEY_F18", Input::KEY_F18)
					.addConstant("KEY_F19", Input::KEY_F19)
					.addConstant("KEY_F20", Input::KEY_F20)
					.addConstant("KEY_F21", Input::KEY_F21)
					.addConstant("KEY_F22", Input::KEY_F22)
					.addConstant("KEY_F23", Input::KEY_F23)
					.addConstant("KEY_F24", Input::KEY_F24)
					.addConstant("KEY_EXECUTE", Input::KEY_EXECUTE)
					.addConstant("KEY_HELP", Input::KEY_HELP)
					.addConstant("KEY_MENU", Input::KEY_MENU)
					.addConstant("KEY_SELECT", Input::KEY_SELECT)
					.addConstant("KEY_STOP", Input::KEY_STOP)
					.addConstant("KEY_AGAIN", Input::KEY_AGAIN)
					.addConstant("KEY_UNDO", Input::KEY_UNDO)
					.addConstant("KEY_CUT", Input::KEY_CUT)
					.addConstant("KEY_COPY", Input::KEY_COPY)
					.addConstant("KEY_PASTE", Input::KEY_PASTE)
					.addConstant("KEY_FIND", Input::KEY_FIND)
					.addConstant("KEY_MUTE", Input::KEY_MUTE)
					.addConstant("KEY_VOLUMEUP", Input::KEY_VOLUMEUP)
					.addConstant("KEY_VOLUMEDOWN", Input::KEY_VOLUMEDOWN)
					.addConstant("KEY_KP_COMMA", Input::KEY_KP_COMMA)
					.addConstant("KEY_KP_EQUALSAS400", Input::KEY_KP_EQUALSAS400)
					.addConstant("KEY_INTERNATIONAL1", Input::KEY_INTERNATIONAL1)
					.addConstant("KEY_INTERNATIONAL2", Input::KEY_INTERNATIONAL2)
					.addConstant("KEY_INTERNATIONAL3", Input::KEY_INTERNATIONAL3)
					.addConstant("KEY_INTERNATIONAL4", Input::KEY_INTERNATIONAL4)
					.addConstant("KEY_INTERNATIONAL5", Input::KEY_INTERNATIONAL5)
					.addConstant("KEY_INTERNATIONAL6", Input::KEY_INTERNATIONAL6)
					.addConstant("KEY_INTERNATIONAL7", Input::KEY_INTERNATIONAL7)
					.addConstant("KEY_INTERNATIONAL8", Input::KEY_INTERNATIONAL8)
					.addConstant("KEY_INTERNATIONAL9", Input::KEY_INTERNATIONAL9)
					.addConstant("KEY_LANG1", Input::KEY_LANG1)
					.addConstant("KEY_LANG2", Input::KEY_LANG2)
					.addConstant("KEY_LANG3", Input::KEY_LANG3)
					.addConstant("KEY_LANG4", Input::KEY_LANG4)
					.addConstant("KEY_LANG5", Input::KEY_LANG5)
					.addConstant("KEY_LANG6", Input::KEY_LANG6)
					.addConstant("KEY_LANG7", Input::KEY_LANG7)
					.addConstant("KEY_LANG8", Input::KEY_LANG8)
					.addConstant("KEY_LANG9", Input::KEY_LANG9)
					.addConstant("KEY_ALTERASE", Input::KEY_ALTERASE)
					.addConstant("KEY_SYSREQ", Input::KEY_SYSREQ)
					.addConstant("KEY_CANCEL", Input::KEY_CANCEL)
					.addConstant("KEY_CLEAR", Input::KEY_CLEAR)
					.addConstant("KEY_PRIOR", Input::KEY_PRIOR)
					.addConstant("KEY_RETURN2", Input::KEY_RETURN2)
					.addConstant("KEY_SEPARATOR", Input::KEY_SEPARATOR)
					.addConstant("KEY_OUT", Input::KEY_OUT)
					.addConstant("KEY_OPER", Input::KEY_OPER)
					.addConstant("KEY_CLEARAGAIN", Input::KEY_CLEARAGAIN)
					.addConstant("KEY_CRSEL", Input::KEY_CRSEL)
					.addConstant("KEY_EXSEL", Input::KEY_EXSEL)
					.addConstant("KEY_KP_00", Input::KEY_KP_00)
					.addConstant("KEY_KP_000", Input::KEY_KP_000)
					.addConstant("KEY_THOUSANDSSEPARATOR", Input::KEY_THOUSANDSSEPARATOR)
					.addConstant("KEY_DECIMALSEPARATOR", Input::KEY_DECIMALSEPARATOR)
					.addConstant("KEY_CURRENCYUNIT", Input::KEY_CURRENCYUNIT)
					.addConstant("KEY_CURRENCYSUBUNIT", Input::KEY_CURRENCYSUBUNIT)
					.addConstant("KEY_KP_LEFTPAREN", Input::KEY_KP_LEFTPAREN)
					.addConstant("KEY_KP_RIGHTPAREN", Input::KEY_KP_RIGHTPAREN)
					.addConstant("KEY_KP_LEFTBRACE", Input::KEY_KP_LEFTBRACE)
					.addConstant("KEY_KP_RIGHTBRACE", Input::KEY_KP_RIGHTBRACE)
					.addConstant("KEY_KP_TAB", Input::KEY_KP_TAB)
					.addConstant("KEY_KP_BACKSPACE", Input::KEY_KP_BACKSPACE)
					.addConstant("KEY_KP_A", Input::KEY_KP_A)
					.addConstant("KEY_KP_B", Input::KEY_KP_B)
					.addConstant("KEY_KP_C", Input::KEY_KP_C)
					.addConstant("KEY_KP_D", Input::KEY_KP_D)
					.addConstant("KEY_KP_E", Input::KEY_KP_E)
					.addConstant("KEY_KP_F", Input::KEY_KP_F)
					.addConstant("KEY_KP_XOR", Input::KEY_KP_XOR)
					.addConstant("KEY_KP_POWER", Input::KEY_KP_POWER)
					.addConstant("KEY_KP_PERCENT", Input::KEY_KP_PERCENT)
					.addConstant("KEY_KP_LESS", Input::KEY_KP_LESS)
					.addConstant("KEY_KP_GREATER", Input::KEY_KP_GREATER)
					.addConstant("KEY_KP_AMPERSAND", Input::KEY_KP_AMPERSAND)
					.addConstant("KEY_KP_DBLAMPERSAND", Input::KEY_KP_DBLAMPERSAND)
					.addConstant("KEY_KP_VERTICALBAR", Input::KEY_KP_VERTICALBAR)
					.addConstant("KEY_KP_DBLVERTICALBAR", Input::KEY_KP_DBLVERTICALBAR)
					.addConstant("KEY_KP_COLON", Input::KEY_KP_COLON)
					.addConstant("KEY_KP_HASH", Input::KEY_KP_HASH)
					.addConstant("KEY_KP_SPACE", Input::KEY_KP_SPACE)
					.addConstant("KEY_KP_AT", Input::KEY_KP_AT)
					.addConstant("KEY_KP_EXCLAM", Input::KEY_KP_EXCLAM)
					.addConstant("KEY_KP_MEMSTORE", Input::KEY_KP_MEMSTORE)
					.addConstant("KEY_KP_MEMRECALL", Input::KEY_KP_MEMRECALL)
					.addConstant("KEY_KP_MEMCLEAR", Input::KEY_KP_MEMCLEAR)
					.addConstant("KEY_KP_MEMADD", Input::KEY_KP_MEMADD)
					.addConstant("KEY_KP_MEMSUBTRACT", Input::KEY_KP_MEMSUBTRACT)
					.addConstant("KEY_KP_MEMMULTIPLY", Input::KEY_KP_MEMMULTIPLY)
					.addConstant("KEY_KP_MEMDIVIDE", Input::KEY_KP_MEMDIVIDE)
					.addConstant("KEY_KP_PLUSMINUS", Input::KEY_KP_PLUSMINUS)
					.addConstant("KEY_KP_CLEAR", Input::KEY_KP_CLEAR)
					.addConstant("KEY_KP_CLEARENTRY", Input::KEY_KP_CLEARENTRY)
					.addConstant("KEY_KP_BINARY", Input::KEY_KP_BINARY)
					.addConstant("KEY_KP_OCTAL", Input::KEY_KP_OCTAL)
					.addConstant("KEY_KP_DECIMAL", Input::KEY_KP_DECIMAL)
					.addConstant("KEY_KP_HEXADECIMAL", Input::KEY_KP_HEXADECIMAL)
					.addConstant("KEY_LCTRL", Input::KEY_LCTRL)
					.addConstant("KEY_LSHIFT", Input::KEY_LSHIFT)
					.addConstant("KEY_LALT", Input::KEY_LALT)
					.addConstant("KEY_LGUI", Input::KEY_LGUI)
					.addConstant("KEY_RCTRL", Input::KEY_RCTRL)
					.addConstant("KEY_RSHIFT", Input::KEY_RSHIFT)
					.addConstant("KEY_RALT", Input::KEY_RALT)
					.addConstant("KEY_RGUI", Input::KEY_RGUI)
					.addConstant("KEY_MODE", Input::KEY_MODE)
					.addConstant("KEY_AUDIONEXT", Input::KEY_AUDIONEXT)
					.addConstant("KEY_AUDIOPREV", Input::KEY_AUDIOPREV)
					.addConstant("KEY_AUDIOSTOP", Input::KEY_AUDIOSTOP)
					.addConstant("KEY_AUDIOPLAY", Input::KEY_AUDIOPLAY)
					.addConstant("KEY_AUDIOMUTE", Input::KEY_AUDIOMUTE)
					.addConstant("KEY_MEDIASELECT", Input::KEY_MEDIASELECT)
					.addConstant("KEY_WWW", Input::KEY_WWW)
					.addConstant("KEY_MAIL", Input::KEY_MAIL)
					.addConstant("KEY_CALCULATOR", Input::KEY_CALCULATOR)
					.addConstant("KEY_COMPUTER", Input::KEY_COMPUTER)
					.addConstant("KEY_AC_SEARCH", Input::KEY_AC_SEARCH)
					.addConstant("KEY_AC_HOME", Input::KEY_AC_HOME)
					.addConstant("KEY_AC_BACK", Input::KEY_AC_BACK)
					.addConstant("KEY_AC_FORWARD", Input::KEY_AC_FORWARD)
					.addConstant("KEY_AC_STOP", Input::KEY_AC_STOP)
					.addConstant("KEY_AC_REFRESH", Input::KEY_AC_REFRESH)
					.addConstant("KEY_AC_BOOKMARKS", Input::KEY_AC_BOOKMARKS)
					.addConstant("KEY_BRIGHTNESSDOWN", Input::KEY_BRIGHTNESSDOWN)
					.addConstant("KEY_BRIGHTNESSUP", Input::KEY_BRIGHTNESSUP)
					.addConstant("KEY_DISPLAYSWITCH", Input::KEY_DISPLAYSWITCH)
					.addConstant("KEY_KBDILLUMTOGGLE", Input::KEY_KBDILLUMTOGGLE)
					.addConstant("KEY_KBDILLUMDOWN", Input::KEY_KBDILLUMDOWN)
					.addConstant("KEY_KBDILLUMUP", Input::KEY_KBDILLUMUP)
					.addConstant("KEY_EJECT", Input::KEY_EJECT)
					.addConstant("KEY_SLEEP", Input::KEY_SLEEP)
					.addConstant("KEY_APP1", Input::KEY_APP1)
					.addConstant("KEY_APP2", Input::KEY_APP2)
				.endClass();

			// Register instances
			Scene *current_scene = nullptr;
			Window *window = nullptr;
			SoundSystem *ssys = nullptr;
			if (game != nullptr) {
				current_scene = game->GetCurrentScene();
				window = game->GetWindow();
				ssys = game->GetSoundSystem();
			}

			LuaBinding(L)
				.beginModule("App")
					.addVariable("game", game)
					.addVariable("current_scene", current_scene)
					.addVariable("window", window)
					.addVariable("sound_system", ssys)
				.endModule();
		}

	}
}

#endif // SIGMA_TYPES_REGISTER
